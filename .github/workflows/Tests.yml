name: Tests

on: [push, pull_request]

jobs:
    linux-50:
        name: Linux (Swift 5.0)
        runs-on: ubuntu-latest
        container: swift:5.0
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Build (Debug)
          run: swift build -v -c debug
        - name: Build (Release)
          run: swift build -v -c release
        - name: Test (Debug)
          run: swift test -v -c debug 
        - name: Test (Release)
          run: swift test -v -c release -Xswiftc -enable-testing
        - name: Slack Notification
          uses: elegantchaos/slatify@master
          if: always()
          with:
            type: ${{ job.status }}
            job_name: 'Linux (Swift 5.0)'
            mention_if: 'failure'
            url: ${{ secrets.SLACK_WEBHOOK }}

    linux-51:
        name: Linux (Swift 5.1)
        runs-on: ubuntu-latest
        container: swift:5.1
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Build (Debug)
          run: swift build -v -c debug
        - name: Build (Release)
          run: swift build -v -c release
        - name: Test (Debug)
          run: swift test -v -c debug 
        - name: Test (Release)
          run: swift test -v -c release -Xswiftc -enable-testing
        - name: Slack Notification
          uses: elegantchaos/slatify@master
          if: always()
          with:
            type: ${{ job.status }}
            job_name: 'Linux (Swift 5.1)'
            mention_if: 'failure'
            url: ${{ secrets.SLACK_WEBHOOK }}

    linux-52:
        name: Linux (Swift 5.2 Nightly)
        runs-on: ubuntu-latest
        container: swiftlang/swift:nightly-5.2
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Build (Debug)
          run: swift build -v -c debug
        - name: Build (Release)
          run: swift build -v -c release
        - name: Test (Debug)
          run: swift test -v -c debug 
        - name: Test (Release)
          run: swift test -v -c release -Xswiftc -enable-testing
        - name: Slack Notification
          uses: elegantchaos/slatify@master
          if: always()
          with:
            type: ${{ job.status }}
            job_name: 'Linux (Swift 5.2 Nightly)'
            mention_if: 'failure'
            url: ${{ secrets.SLACK_WEBHOOK }}

    linux-n:
        name: Linux (Swift Nightly)
        runs-on: ubuntu-latest
        container: swiftlang/swift:nightly
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Build (Debug)
          run: swift build -v -c debug
        - name: Build (Release)
          run: swift build -v -c release
        - name: Test (Debug)
          run: swift test -v -c debug 
        - name: Test (Release)
          run: swift test -v -c release -Xswiftc -enable-testing
        - name: Slack Notification
          uses: elegantchaos/slatify@master
          if: always()
          with:
            type: ${{ job.status }}
            job_name: 'Linux (Swift Nightly)'
            mention_if: 'failure'
            url: ${{ secrets.SLACK_WEBHOOK }}

    macOS-iOS-tvOS:
        name: macOS/iOS/tvOS
        runs-on: macOS-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v1
        - name: Swift Version
          run: swift --version
        - name: Make Logs Directory
          run: mkdir logs
        - name: Xcode Version
          run: xcodebuild -version
        - name: XC Pretty
          run: sudo gem install xcpretty-travis-formatter
        - name: Detect Workspace & Scheme
          run: |
            WORKSPACE="URLExtensions.xcworkspace"
            if [[ ! -e "$WORKSPACE" ]]
            then
                WORKSPACE="."
                GOTPACKAGE=$(xcodebuild -workspace . -list | (grep URLExtensions-Package || true))
                if [[ $GOTPACKAGE != "" ]]
                then
                    SCHEME="URLExtensions-Package"
                else
                    SCHEME="URLExtensions"
                fi
                MACOS_SCHEME="$SCHEME"
                IOS_SCHEME="$SCHEME"
                TVOS_SCHEME="$SCHEME"
            else
                MACOS_SCHEME="URLExtensions-macOS"
                IOS_SCHEME="URLExtensions-iOS"
                TVOS_SCHEME="URLExtensions-tvOS"
            fi
            echo "WORKSPACE='$WORKSPACE'; SCHEME='$MACOS_SCHEME'" > names-macOS.sh
            echo "WORKSPACE='$WORKSPACE'; SCHEME='$IOS_SCHEME'" > names-iOS.sh
            echo "WORKSPACE='$WORKSPACE'; SCHEME='$TVOS_SCHEME'" > names-tvOS.sh
        - name: Build (Debug)
          run: swift build -v -c debug
        - name: Build (Release)
          run: swift build -v -c release
        - name: Test (Debug)
          run: swift test -v -c debug 
        - name: Test (Release)
          run: swift test -v -c release -Xswiftc -enable-testing
        - name: Build (iOS/Debug)
          run: |
            set -o pipefail
            source "names-iOS.sh"
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-iOS-build-debug.log | xcpretty
        - name: Build (iOS/Release)
          run: |
            set -o pipefail
            source "names-iOS.sh"
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-iOS-build-release.log | xcpretty
        - name: Test (iOS/Debug)
          run: |
            set -o pipefail
            source "names-iOS.sh"
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO  | tee logs/xcodebuild-iOS-test-debug.log | xcpretty
        - name: Test (iOS/Release)
          run: |
            set -o pipefail
            source "names-iOS.sh"
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-test-release.log | xcpretty
        - name: Build (tvOS/Debug)
          run: |
            set -o pipefail
            source "names-tvOS.sh"
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-tvOS-build-debug.log | xcpretty
        - name: Build (tvOS/Release)
          run: |
            set -o pipefail
            source "names-tvOS.sh"
            xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | tee logs/xcodebuild-tvOS-build-release.log | xcpretty
        - name: Test (tvOS/Debug)
          run: |
            set -o pipefail
            source "names-tvOS.sh"
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple TV" -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO  | tee logs/xcodebuild-tvOS-test-debug.log | xcpretty
        - name: Test (tvOS/Release)
          run: |
            set -o pipefail
            source "names-tvOS.sh"
            xcodebuild test -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=Apple TV" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-tvOS-test-release.log | xcpretty
        - name: Slack Notification
          uses: elegantchaos/slatify@master
          if: always()
          with:
            type: ${{ job.status }}
            job_name: 'macOS/iOS/tvOS'
            mention_if: 'failure'
            url: ${{ secrets.SLACK_WEBHOOK }}

